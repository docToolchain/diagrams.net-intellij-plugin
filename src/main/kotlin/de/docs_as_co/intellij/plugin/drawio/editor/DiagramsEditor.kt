package de.docs_as_co.intellij.plugin.drawio.editor

import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.editor.colors.EditorColorsListener
import com.intellij.openapi.editor.colors.EditorColorsManager
import com.intellij.openapi.editor.colors.EditorColorsScheme
import com.intellij.openapi.fileEditor.FileEditor
import com.intellij.openapi.fileEditor.FileEditorLocation
import com.intellij.openapi.fileEditor.FileEditorState
import com.intellij.openapi.project.DumbAware
import com.intellij.openapi.project.Project
import com.intellij.openapi.util.Key
import com.intellij.openapi.util.UserDataHolderBase
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.ui.JBColor
import com.intellij.util.ui.UIUtil
import com.jetbrains.rd.util.lifetime.LifetimeDefinition
import de.docs_as_co.intellij.plugin.drawio.settings.DiagramsApplicationSettings
import de.docs_as_co.intellij.plugin.drawio.settings.DiagramsUiMode
import de.docs_as_co.intellij.plugin.drawio.settings.DiagramsUiTheme
import java.beans.PropertyChangeListener
import javax.swing.JComponent


class DiagramsEditor(private val project: Project, private val file: VirtualFile) : FileEditor, EditorColorsListener, DumbAware,
    DiagramsApplicationSettings.SettingsChangedListener {
    private val lifetimeDef = LifetimeDefinition()
    private val lifetime = lifetimeDef.lifetime
    private val userDataHolder = UserDataHolderBase()
    private val xmlHeader = """<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
"""

    // Unique ID for this editor instance
    private val editorId = generateEditorId(file)

    override fun getFile() = file

    private var view :DiagramsWebView

    init {

        //subscribe to changes of the theme
        val settingsConnection = ApplicationManager.getApplication().messageBus.connect(this)
        settingsConnection.subscribe(EditorColorsManager.TOPIC, this)
        settingsConnection.subscribe(DiagramsApplicationSettings.SettingsChangedListener.TOPIC, this)

        view = DiagramsWebView(lifetime, uiThemeFromConfig().key, uiModeFromConfig().key)
        initView()

        // Register with MCP service
        try {
            de.docs_as_co.intellij.plugin.drawio.mcp.DiagramMcpService.instance.registerEditor(editorId, this, project, file)
        } catch (e: Exception) {
            // MCP service might not be available or enabled, ignore
        }
    }

    private fun uiThemeFromConfig(): DiagramsUiTheme {
        return DiagramsApplicationSettings.instance.getDiagramsSettings().uiTheme
    }

    private fun uiModeFromConfig(): DiagramsUiMode {
        var uiMode = DiagramsApplicationSettings.instance.getDiagramsSettings().uiMode
        if (uiMode == DiagramsUiMode.AUTO) {
            //set theme according to IntelliJ-theme
            uiMode = if (JBColor.isBright()) {
                DiagramsUiMode.LIGHT
            } else {
                DiagramsUiMode.DARK
            }
        }
        return uiMode
    }

    private fun initView() {
        view.initialized().then {
            if (file.name.endsWith(".png")) {
                val payload = file.inputStream.readBytes()
                view.loadPng(payload)
            } else {
                val payload = file.inputStream.reader().readText()
                view.loadXmlLike(payload)
            }
        }

        view.xmlContent.advise(lifetime) { xml ->
            if (xml !== null) {
                val isSVGFile = file.name.endsWith(".svg")
                val isPNGFile = file.name.endsWith(".png")
                if ( isSVGFile ) {
                    //ignore the xml payload and ask for an exported svg
                    view.exportSvg().then{ data: String ->
                        val content = xmlHeader + data
                        saveFile(content.toByteArray(charset("utf-8")))
                    }
                } else if ( isPNGFile ) {
                    //ignore the xml payload and ask for an exported svg
                    view.exportPng().then { data: ByteArray ->
                        saveFile(data)
                    }
                } else {
                    saveFile(xml.toByteArray(charset("utf-8")))
                }
            }
        }

    }

    @Override
    override fun globalSchemeChange(scheme: EditorColorsScheme?) {
        view.reload(uiThemeFromConfig().key, uiModeFromConfig().key) {
            initView()
        }
    }

    override fun onSettingsChange(settings: DiagramsApplicationSettings) {
        view.reload(uiThemeFromConfig().key, uiModeFromConfig().key) {
            initView()
        }
    }

    private fun saveFile(data: ByteArray) {
        ApplicationManager.getApplication().invokeLater {
            ApplicationManager.getApplication().runWriteAction {
                file.getOutputStream(this).use { outputStream ->
                    outputStream.write(data)
                    outputStream.flush()
                }
            }
        }
    }
    override fun getComponent(): JComponent {
        return view.component
    }

    override fun getPreferredFocusedComponent(): JComponent {
        return view.component
    }

    @Suppress("DialogTitleCapitalization")
    override fun getName() = "diagrams.net editor"

    override fun setState(state: FileEditorState) {

    }

    override fun isModified(): Boolean {
        return false
    }

    override fun isValid(): Boolean {
        return true
    }

    override fun addPropertyChangeListener(listener: PropertyChangeListener) {
    }

    override fun removePropertyChangeListener(listener: PropertyChangeListener) {

    }

    override fun getCurrentLocation(): FileEditorLocation? {
        return null
    }

    override fun dispose() {
        // Unregister from MCP service
        try {
            de.docs_as_co.intellij.plugin.drawio.mcp.DiagramMcpService.instance.unregisterEditor(editorId)
        } catch (e: Exception) {
            // MCP service might not be available, ignore
        }
        lifetimeDef.terminate(true)
    }

    override fun <T : Any?> getUserData(key: Key<T>): T? {
        return userDataHolder.getUserData(key)
    }

    override fun <T : Any?> putUserData(key: Key<T>, value: T?) {
        userDataHolder.putUserData(key, value)
    }

    fun openDevTools() {
        view.openDevTools();
    }

    // ========== MCP Integration Methods ==========

    /**
     * Get the current XML content of the diagram.
     * This returns the cached XML from the last AutoSave event.
     * For the XML to be available, the diagram must have triggered an autosave
     * (which happens when you make changes in the editor).
     * @return The XML content, or null if not yet loaded
     */
    fun getXmlContent(): String? {
        return view.xmlContent.value
    }

    /**
     * Update the diagram with new XML content.
     * @param xml The new XML content
     */
    fun updateXmlContent(xml: String) {
        view.loadXmlLike(xml)
    }

    /**
     * Update the diagram with new XML content and save it to the file.
     * This method loads the XML and then triggers a save operation.
     * @param xml The new XML content
     */
    fun updateAndSaveXmlContent(xml: String) {
        val isSVGFile = file.name.endsWith(".svg")
        val isPNGFile = file.name.endsWith(".png")

        // Load the XML and wait for the webview to finish loading
        view.loadXmlLike(xml).then {
            // Now that the content is loaded, trigger the appropriate save operation
            if (isSVGFile) {
                view.exportSvg().then { data: String ->
                    val content = xmlHeader + data
                    saveFile(content.toByteArray(charset("utf-8")))
                }
            } else if (isPNGFile) {
                view.exportPng().then { data: ByteArray ->
                    saveFile(data)
                }
            } else {
                // For XML files, save the raw XML directly
                saveFile(xml.toByteArray(charset("utf-8")))
            }
        }
    }

    /**
     * Get the editor ID.
     */
    fun getEditorId(): String {
        return editorId
    }

    /**
     * Export the diagram as SVG.
     */
    fun exportAsSvg() = view.exportSvg()

    /**
     * Export the diagram as PNG.
     */
    fun exportAsPng() = view.exportPng()

    companion object {
        /**
         * Generate a unique ID for an editor based on the file path.
         */
        fun generateEditorId(file: VirtualFile): String {
            return file.path.hashCode().toString(16)
        }
    }

}
