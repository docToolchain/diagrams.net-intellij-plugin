# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run test and verifyPlugin tasks,
# - run buildPlugin task and prepare artifact for the further tests,
# - run IntelliJ Plugin Verifier,
# - create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action
#
## JBIJPPTPL

name: Build
on:
  push:
    # dependabot will create both branches and pull request
    # only run on pull requests to avoid running twice and creating a release draft
    branches-ignore:
      - 'dependabot/**'
  pull_request:

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.properties.outputs.name }}
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      artifact: ${{ steps.properties.outputs.artifact }}
    steps:

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4.7.1
        with:
          java-version: 21
          distribution: 'corretto'

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          submodules: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          ARTIFACT="${NAME}-${VERSION}.zip"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT

      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew --stacktrace check verifyPlugin buildPlugin

      # Upload plugin artifact to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ needs.build.outputs.artifact }}
          if-no-files-found: error

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    # don't run on pull requests to avoid creating draft releases for pull requests
    # only run on the main branch, to avoid cutting releases from feature branches
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          submodules: true

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/${{ github.repository }}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.build.outputs.version }}" \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"

      # Download plugin artifact provided by the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-artifact

      # Upload artifact as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload v${{ needs.build.outputs.version }} ./${{ needs.build.outputs.artifact }}
